<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="amazons3_getObject"
       transports="https,http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
   <target>
      <inSequence>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="accessKeyId"
                   expression="//ns:accessKeyId/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="secretAccessKey"
                   expression="//ns:secretAccessKey/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="methodType"
                   expression="//ns:methodType/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getbucketversioning"
                   name="contentLength"
                   expression="//ns:contentLength/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="contentType"
                   expression="//ns:contentType/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="contentMD5"
                   expression="//ns:contentMD5/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="expect"
                   expression="//ns:expect/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="host"
                   expression="//ns:host/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="xAmzDate"
                   expression="//ns:xAmzDate/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="xAmzSecurityToken"
                   expression="//ns:xAmzSecurityToken/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="bucketName"
                   expression="//ns:bucketName/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="uriRemainder"
                   expression="//ns:uriRemainder/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="bucketUrl"
                   expression="//ns:bucketUrl/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="responseContentType"
                   expression="//ns:responseContentType/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="responseContentLanguage"
                   expression="//ns:responseContentLanguage/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="responseExpires"
                   expression="//ns:responseExpires/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="responseCacheControl"
                   expression="//ns:responseCacheControl/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="responseContentDisposition"
                   expression="//ns:responseContentDisposition/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="responseContentEncoding"
                   expression="//ns:responseContentEncoding/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="range"
                   expression="//ns:range/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="ifModifiedSince"
                   expression="//ns:ifModifiedSince/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="ifUnmodifiedSince"
                   expression="//ns:ifUnmodifiedSince/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="ifMatch"
                   expression="//ns:ifMatch/text()"/>
         <property xmlns:ns="wso2.connector.amazons3.getObject"
                   name="ifNoneMatch"
                   expression="//ns:ifNoneMatch/text()"/>
         <amazons3-connector-1.0.0.init>
            <accessKeyId>{$ctx:accessKeyId}</accessKeyId>
            <secretAccessKey>{$ctx:secretAccessKey}</secretAccessKey>
            <methodType>{$ctx:methodType}</methodType>
            <contentLength>{$ctx:contentLength}</contentLength>
            <contentType>{$ctx:contentType}</contentType>
            <contentMD5>{$ctx:contentMD5}</contentMD5>
            <expect>{$ctx:expect}</expect>
            <host>{$ctx:host}</host>
            <xAmzDate>{$ctx:xAmzDate}</xAmzDate>
            <xAmzSecurityToken>{$ctx:xAmzSecurityToken}</xAmzSecurityToken>
            <bucketName>{$ctx:bucketName}</bucketName>
            <uriRemainder>{$ctx:uriRemainder}</uriRemainder>
         </amazons3-connector-1.0.0.init>
         <amazons3-connector-1.0.0.getObject>
            <bucketUrl>{$ctx:bucketUrl}</bucketUrl>
            <responseContentType>{$ctx:responseContentType}</responseContentType>
            <responseContentLanguage>{$ctx:responseContentLanguage}</responseContentLanguage>
            <responseExpires>{$ctx:responseExpires}</responseExpires>
            <responseCacheControl>{$ctx:responseCacheControl}</responseCacheControl>
            <responseContentDisposition>{$ctx:responseContentDisposition}</responseContentDisposition>
            <responseContentEncoding>{$ctx:responseContentEncoding}</responseContentEncoding>
            <range>{$ctx:range}</range>
            <ifModifiedSince>{$ctx:ifModifiedSince}</ifModifiedSince>
            <ifUnmodifiedSince>{$ctx:ifUnmodifiedSince}</ifUnmodifiedSince>
            <ifMatch>{$ctx:ifMatch}</ifMatch>
            <ifNoneMatch>{$ctx:ifNoneMatch}</ifNoneMatch>
         </amazons3-connector-1.0.0.getObject>
         <respond/>
      </inSequence>
      <outSequence>
         <log/>
         <send/>
      </outSequence>
   </target>
   <description/>
</proxy>
