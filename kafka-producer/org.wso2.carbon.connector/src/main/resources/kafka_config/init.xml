<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 *  Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 -->
 
<template xmlns="http://ws.apache.org/ns/synapse" name="init">
    <parameter name="brokerList" description="The format is host1:port1,host2:port2"/>
    <parameter name="serializationClass" description="The serializer class for messages. The default encoder takes a byte and returns the same byte"/>
    <parameter name="requiredAck" description="This value controls when a produce request is considered completed"/>
    <parameter name="producerType" description="This parameter specifies whether the messages are sent asynchronously or synchronously"/>
    <parameter name="keySerializerClass" description=" The serializer class for keys"/>
    <parameter name="partitionClass" description="The class for partitioning messages amongst sub-topics"/>
    <parameter name="compressionCodec" description="This parameter allows you to specify the compression codec for all data generated by this producer"/>
    <parameter name="compressedTopics" description="This parameter allows you to set whether compression should be turned on for particular topics"/>
    <parameter name="messageSendMaxRetries" description="This property will cause the producer to automatically retry a failed send request"/>
    <parameter name="retryBackOff" description="This property specifies the amount of time that the producer waits before refreshing the metadata."/>
    <parameter name="refreshInterval" description="The producer generally refreshes the topic metadata from brokers when there is a failure. It will also poll regularly"/>
    <parameter name="bufferingMaxMessages" description="The maximum number of unsent messages that can be queued up the producer when using async mode"/>
    <parameter name="batchNoMessages" description="The number of messages to send in one batch when using async mode"/>
    <parameter name="sendBufferSize" description="Socket write buffer size"/>
    <parameter name="requestTimeout" description="The amount of time the broker will wait trying to meet the request"/>
    <paramter  name="bufferingMaxTime" description="Maximum time to buffer data when using async mode."/>
    <parameter name="enqueueTimeout" description="The amount of time to block before dropping messages when running in async mode and the buffer has reached queue.buffering.max.messages"/>
    <parameter name="clientId" description="The client id is a user-specified string sent in each request to help trace calls."/>
	<sequence>
		<property expression="$func:brokerList" name="kafka.brokerList"
			scope="operation" type="STRING" />
		<property expression="$func:requiredAck" name="kafka.requiredAck" />
		<property expression="$func:requestTimeout" name="kafka.requestTimeout" />
		<property expression="$func:producerType" name="kafka.producerType" />
		<property expression="$func:serializationClass" name="kafka.serializationClass" />
		<property expression="$func:keySerializerClass" name="kafka.keySerializerClass" />
		<property expression="$func:partitionClass" name="kafka.partitionClass" />
		<property expression="$func:compressionCodec" name="kafka.compressionCodec" />
		<property expression="$func:compressedTopics" name="kafka.compressedTopics" />
		<property expression="$func:messageSendMaxRetries" name="kafka.messageSendMaxRetries" />
		<property expression="$func:retryBackOff" name="kafka.retryBackOff" />
		<property expression="$func:refreshInterval" name="kafka.refreshInterval" />
		<property expression="$func:bufferingMaxMessages" name="kafka.bufferingMaxMessages" />
		<property expression="$func:batchNoMessages" name="kafka.batchNoMessages" />
		<property expression="$func:sendBufferSize" name="kafka.sendBufferSize" />
		<property expression="$func:requestTimeout" name="kafka.requestTimeout" />
		<property expression="$func:bufferingMaxTime" name="kafka.bufferingMaxTime" />
		<property expression="$func:enqueueTimeout" name="kafka.enqueueTimeout" />
		<property expression="$func:clientId" name="kafka.clientId" />

		<filter
			xpath="get-property('kafka.compressionCodec') = '' or  not(string(get-property('kafka.compressionCodec')))">
			<then>
				<property name="kafka.compressionCodec" value="none" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.compressionCodec" expression="$func:compressionCodec"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.serializationClass') = '' or  not(string(get-property('kafka.serializationClass')))">
			<then>
				<property name="kafka.serializationClass" value="kafka.serializer.StringEncoder"
					scope="operation" type="STRING" />
			</then>
			<else>
				<property name="kafka.serializationClass" expression="$func:serializationClass"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.requiredAck') = '' or  not(string(get-property('kafka.requiredAck')))">
			<then>
				<property name="kafka.requiredAck" value="0" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.requiredAck" expression="$func:requiredAck"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.producerType') = '' or  not(string(get-property('kafka.producerType')))">
			<then>
				<property name="kafka.producerType" value="sync" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.producerType" expression="$func:producerType"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.keySerializerClass') = '' or  not(string(get-property('kafka.keySerializerClass')))">
			<then>
				<property name="kafka.keySerializerClass" value="kafka.serializer.StringEncoder"
					scope="operation" type="STRING" />
			</then>
			<else>
				<property name="kafka.keySerializerClass" expression="$func:keySerializerClass"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.partitionClass') = '' or  not(string(get-property('kafka.partitionClass')))">
			<then>
				<property name="kafka.partitionClass" value="kafka.producer.DefaultPartitioner"
					scope="operation" type="STRING" />
			</then>
			<else>
				<property name="kafka.partitionClass" expression="$func:partitionClass"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.compressedTopics') = '' or  not(string(get-property('kafka.compressedTopics')))">
			<then>
				<property name="kafka.compressedTopics" value="null" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.compressedTopics" expression="$func:compressedTopics"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.messageSendMaxRetries') = '' or  not(string(get-property('kafka.messageSendMaxRetries')))">
			<then>
				<property name="kafka.messageSendMaxRetries" value="3"
					scope="operation" type="STRING" />
			</then>
			<else>
				<property name="kafka.messageSendMaxRetries" expression="$func:messageSendMaxRetries"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.retryBackOff') = '' or  not(string(get-property('kafka.retryBackOff')))">
			<then>
				<property name="kafka.retryBackOff" value="100" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.retryBackOff" expression="$func:retryBackOff"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.refreshInterval') = '' or  not(string(get-property('kafka.refreshInterval')))">
			<then>
				<property name="kafka.refreshInterval" value="600" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.refreshInterval" expression="$func:refreshInterval"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.bufferingMaxMessages') = '' or  not(string(get-property('kafka.bufferingMaxMessages')))">
			<then>
				<property name="kafka.bufferingMaxMessages" value="200000"
					scope="operation" type="STRING" />
			</then>
			<else>
				<property name="kafka.bufferingMaxMessages" expression="$func:bufferingMaxMessages"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.batchNoMessages') = '' or  not(string(get-property('kafka.batchNoMessages')))">
			<then>
				<property name="kafka.batchNoMessages" value="200" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.batchNoMessages" expression="$func:batchNoMessages"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.sendBufferSize') = '' or  not(string(get-property('kafka.sendBufferSize')))">
			<then>
				<property name="kafka.sendBufferSize" value="1024"
					scope="operation" type="STRING" />
			</then>
			<else>
				<property name="kafka.sendBufferSize" expression="$func:sendBufferSize"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.requestTimeout') = '' or  not(string(get-property('kafka.requestTimeout')))">
			<then>
				<property name="kafka.requestTimeout" value="10000" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.requestTimeout" expression="$func:requestTimeout"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.enqueueTimeout') = '' or  not(string(get-property('kafka.enqueueTimeout')))">
			<then>
				<property name="kafka.enqueueTimeout" value="-1" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.enqueueTimeout" expression="$func:enqueueTimeout"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.bufferingMaxTime') = '' or  not(string(get-property('kafka.bufferingMaxTime')))">
			<then>
				<property name="kafka.bufferingMaxTime" value="5000" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.bufferingMaxTime" expression="$func:bufferingMaxTime"
					scope="operation" type="STRING" />
			</else>
		</filter>
		<filter
			xpath="get-property('kafka.clientId') = '' or  not(string(get-property('kafka.clientId')))">
			<then>
				<property name="kafka.clientId" value="" scope="operation"
					type="STRING" />
			</then>
			<else>
				<property name="kafka.clientId" expression="$func:clientId"
					scope="operation" type="STRING" />
			</else>
		</filter>
	</sequence>
</template>