<template name="getConnections" xmlns="http://ws.apache.org/ns/synapse">
	<parameter name="id"
		description="Id of the member of whose connections are requested to be retrived" />
	<parameter name="publicUrl" description="public url of the requested profile" />
	<parameter name="fields"
		description="fields of the connections that are required to be returned" />

	<parameter name="start"
		description="Start location within the result set for paginated returns" />
	<parameter name="count"
		description="The number of profiles to return.Values can range between 0 and 25." />
	<parameter name="modified" description="Values are updated or new" />
	<parameter name="modifiedSince"
		description="Value as a Unix time stamp of milliseconds since epoch" />

	<sequence>
		<property name="uri.var.id" expression="$func:id" />
		<property name="uri.var.publicUrl" expression="$func:publicUrl" />
		<property name="uri.var.fields" expression="$func:fields" />


		<property name="uri.var.start" expression="$func:start" />
		<property name="uri.var.count" expression="$func:count" />
		<property name="uri.var.modified" expression="$func:modified" />
		<property name="uri.var.modifiedSince" expression="$func:modifiedSince" />



		<!-- if only the access token is given -->
		<filter
			xpath="not(get-property('uri.var.accessToken') = '') and (get-property('uri.var.id') = '') and (get-property('uri.var.publicUrl') = '') and (get-property('uri.var.fields') = '')">
			<call>
				<endpoint>
					<http method="get"
						uri-template="{uri.var.linkedinUrl}/people/~/connections?oauth2_access_token={uri.var.accessToken}&amp;format=json" />
				</endpoint>
			</call>

		</filter>

		<filter
			xpath="not(get-property('uri.var.accessToken') = '') and not(get-property('uri.var.id') = '') and (get-property('uri.var.publicUrl') = '') and (get-property('uri.var.fields') = '')">
			<then>
				<call>
					<endpoint>
						<http method="get"
							uri-template="{uri.var.linkedinUrl}/people/id={uri.var.id}/connections?oauth2_access_token={uri.var.accessToken}&amp;format=json" />
					</endpoint>
				</call>
			</then>
		</filter>

		<filter
			xpath="not(get-property('uri.var.accessToken') = '') and not(get-property('uri.var.publicUrl') = '') and (get-property('uri.var.id') = '') and (get-property('uri.var.fields') = '')">
			<then>
				<call>
					<endpoint>
						<http method="get"
							uri-template="{uri.var.linkedinUrl}/people/url={uri.var.publicUrl}/connections?oauth2_access_token={uri.var.accessToken}&amp;format=json" />
					</endpoint>
				</call>
			</then>
		</filter>

		<filter
			xpath="not(get-property('uri.var.accessToken') = '') and not(get-property('uri.var.fields') = '') and (get-property('uri.var.id') = '') and (get-property('uri.var.publicUrl') = '')">
			<then>	
	
				<call>
					<endpoint>
 						 <!--  <http method="get" uri-template="{uri.var.finalUrl}" /> -->
							
						 <http method="get" uri-template="{uri.var.linkedinUrl}/people/~/connections:({uri.var.fields})?oauth2_access_token={uri.var.accessToken}&amp;format=json" /> 
					</endpoint>
				</call>
			</then>
		</filter>


		 
	</sequence>
</template>