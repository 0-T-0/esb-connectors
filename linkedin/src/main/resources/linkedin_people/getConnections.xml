<template name="getConnections" xmlns="http://ws.apache.org/ns/synapse">

	<parameter name="id" description="Id of the member of whose connections are requested to be retrived." />
	<parameter name="publicProfileUrl" description="public url of the requested profile." />
	<parameter name="fieldSelectors" description="Fields that are required to be retrived from the search result." />
	<parameter name="start" description="Start location within the result set for paginated returns." />
	<parameter name="count" description="The number of profiles to return.Values can range between 0 and 25." />
	<parameter name="modified" description="Values are updated or new." />
	<parameter name="modifiedSince" description="Value as a Unix time stamp of milliseconds since epoch." />

	<sequence>

		<property name="uri.var.id" expression="$func:id" />
		<property name="uri.var.publicProfileUrl" expression="$func:publicProfileUrl" />
		<property name="uri.var.fieldSelectors" expression="$func:fieldSelectors" />
		<property name="uri.var.start" expression="$func:start" />
		<property name="uri.var.count" expression="$func:count" />
		<property name="uri.var.modified" expression="$func:modified" />
		<property name="uri.var.modifiedSince" expression="$func:modifiedSince" />
		<property name="uri.var.query" value="" />

		<script language="js">
        <![CDATA[

        	var apiUrl = mc.getProperty('uri.var.apiUrl')+'/v1/people/';
			var id = mc.getProperty('uri.var.id');
			var publicProfileUrl = mc.getProperty('uri.var.publicProfileUrl');
			var fieldSelectors = mc.getProperty('uri.var.fieldSelectors');
			var query ='';
			var start = mc.getProperty('uri.var.start');
			var count = mc.getProperty('uri.var.count');
			var modified = mc.getProperty('uri.var.modified');
			var modifiedSince = mc.getProperty('uri.var.modifiedSince');

			if (id != null && id != "") {
				query = apiUrl + 'id=' + mc.getProperty('uri.var.id') + '/connections';
			} else if(publicProfileUrl != null && publicProfileUrl != "") {
				var encoded_publicProfileUrl = encodeURIComponent(mc.getProperty('uri.var.publicProfileUrl'));
				query = apiUrl + 'url=' + encoded_publicProfileUrl + '/connections';
			} else {
				query = apiUrl + '~/connections';
			}
						
			if (fieldSelectors != null && fieldSelectors != "") {
				query = query + ':' + '(' + mc.getProperty('uri.var.fieldSelectors') + ')';
			}	
						
			query = query + '?oauth2_access_token=' + mc.getProperty('uri.var.accessToken');
						
			if (start != null && start != "") {
				query = query + '&start=' + mc.getProperty('uri.var.start');
			}

			if (count != null && count != "") {
				query = query + '&count=' + mc.getProperty('uri.var.count');
			}

			if (modified != null && modified != "") {
				query = query + '&modified=' + mc.getProperty('uri.var.modified');
			}

			if (modifiedSince != null && modifiedSince != "") {
				query = query + '&modified-since=' + mc.getProperty('uri.var.modifiedSince');
			}
			
			query = query + '&format=json';			
			mc.setProperty('uri.var.query', query);

	 	]]>
		</script>

		<call>
			<endpoint>
				<http method="get" uri-template="{uri.var.query}" />
			</endpoint>
		</call>

		<!-- Remove response custom header information -->
		<header name="x-li-format" scope="transport" action="remove" />
		<header name="X-LI-UUID" scope="transport" action="remove" />
		<header name="X-Li-Pop" scope="transport" action="remove" />
		<header name="X-Li-Fabric" scope="transport" action="remove" />
		<header name="x-li-request-id" scope="transport" action="remove" />
		<header name="Set-Cookie" scope="transport" action="remove" />

	</sequence>

</template>