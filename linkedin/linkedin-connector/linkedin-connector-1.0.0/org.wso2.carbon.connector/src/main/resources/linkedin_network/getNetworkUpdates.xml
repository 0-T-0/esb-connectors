<template name="getNetworkUpdates" xmlns="http://ws.apache.org/ns/synapse">
	<parameter name="id"
		description="ID of the connection that updates will be retrieved from" />
	<parameter name="scope"
		description="self to return members feed and Omitted to return aggregated network feed" />
	<parameter name="type" description="Any valid Network Update Type" />
	<parameter name="count"
		description="Number of updates to return, with a maximum of 250" />
	<parameter name="start"
		description="The offset by which to start Network Update pagination" />
	<parameter name="after"
		description="timestamp after which to retrieve updates for" />
	<parameter name="before"
		description="timestamp before which to retrieve updates for" />
	<parameter name="showHiddenMembers"
		description=" Whether to display updates from people the member has chosen to hide from their update stream" />
	<parameter name="fieldSelectors" description="To retrieve the specific fields." />
	<sequence>
		<property name="uri.var.id" expression="$func:id" />
		<property name="uri.var.scope" expression="$func:scope" />
		<property name="uri.var.type" expression="$func:type" />
		<property name="uri.var.count" expression="$func:count" />
		<property name="uri.var.start" expression="$func:start" />
		<property name="uri.var.after" expression="$func:after" />
		<property name="uri.var.before" expression="$func:before" />
		<property name="uri.var.showHiddenMembers" expression="$func:showHiddenMembers" />
		<property name="uri.var.fieldSelectors" expression="$func:fieldSelectors" />

		<script language="js">
        <![CDATA[  
        
			var query = '';
			
			var scope = mc.getProperty('uri.var.scope');
			if(scope != null && scope != "")
			{
				query = query + '&scope=' + scope;
			}
			
			var type = mc.getProperty('uri.var.type');
			if(type != null && type != "")
			{
				  var type_array=type.split(',');
				  for(var i = 0; i < type_array.length; i++)
				  {
                    query = query + '&type=' + type_array[i].trim();
				  }
			}

			var count = mc.getProperty('uri.var.count');
			if(count != null && count != "")
			{
				query = query + '&count=' + count;
			}

			var start = mc.getProperty('uri.var.start');
			if(start != null && start != "")
			{
				query = query + '&start=' + start;
			}

			var after = mc.getProperty('uri.var.after');
			if(after != null && after != "")
			{
				query = query + '&after=' + after;
			}

			var before = mc.getProperty('uri.var.before');
			if(before != null && before != "")
			{
				query = query + '&before=' + before;
			}

			var showHiddenMembers = mc.getProperty('uri.var.showHiddenMembers');
			if(showHiddenMembers != null && showHiddenMembers != "")
			{
				query = query + '&show-hidden-members=' + showHiddenMembers;
			}

			mc.setProperty('uri.var.query',query);
			
			var fieldSelectors=mc.getProperty('uri.var.fieldSelectors');
			if(fieldSelectors != null && fieldSelectors != ""){
			
				fieldSelectors=':('+fieldSelectors+')';
				mc.setProperty('uri.var.fieldSelectors', fieldSelectors);
			
			}else{
			
				mc.setProperty('uri.var.fieldSelectors', '');
			}

	]]></script>

		<filter xpath="not(get-property('uri.var.id') = '') and string(get-property('uri.var.id'))">
			<then>
				<call>
					<endpoint>
						<http method="get"
							uri-template="{+uri.var.apiUrl}/v1/people/id={+uri.var.id}/network/updates{+uri.var.fieldSelectors}?oauth2_access_token={+uri.var.accessToken}&amp;format=json{+uri.var.query}" />
					</endpoint>
				</call>
			</then>
			<else>
				<call>
					<endpoint>
						<http method="get"
							uri-template="{+uri.var.apiUrl}/v1/people/~/network/updates{+uri.var.fieldSelectors}?oauth2_access_token={+uri.var.accessToken}&amp;format=json{+uri.var.query}" />
					</endpoint>
				</call>
			</else>
		</filter>

		<!-- Remove response custom header information -->
		<header name="x-li-format" scope="transport" action="remove" />
		<header name="X-LI-UUID" scope="transport" action="remove" />
		<header name="X-Li-Fabric" scope="transport" action="remove" />
		<header name="x-li-request-id" scope="transport" action="remove" />
		<header name="X-Li-Pop" scope="transport" action="remove" />
		<header name="Set-Cookie" scope="transport" action="remove" />

	</sequence>
</template>