<?xml version="1.0" encoding="UTF-8"?>
<template xmlns="http://ws.apache.org/ns/synapse" name="zohocrm_createQbSalesReceipt">
	<parameter name="zohoApiUrl" description="The api url" />
	<parameter name="zohoAccessToken" description="Encrypted alphanumeric string to authenticate the Zoho credentials" />
	<parameter name="zohoScope" description="Specify the value as crmapi" />
	<parameter name="zohoQuoteId" description="The id of the quote which is in the confirmed state" />
	<parameter name="zohoNewFormat" description="The newFormat, an integer determine weather null valus should be excluded(1) or included(2)" />
	<parameter name="zohoVersion" description="The API version" />
    <parameter name="zohowfTrigger" description="The wfTrigger parameter is used to trigger the workflow rule while inserting record into CRM account"/>
    <parameter name="zohoduplicateCheck" description="Checking the duplicate records and throw an error response"/>
	
	<parameter name="qbApiUrl" description="The apiUrl of quickbooks." />
	<parameter name="qbConsumerKey" description="The consumer key of the created application." />
	<parameter name="qbConsumerSecret" description="The consumer secret of the created application." />
	<parameter name="qbAccessToken" description="The generated access token." />
	<parameter name="qbAccessTokenSecret" description="The generated access token secret." />		
	<parameter name="qbCompanyId" description="The ID of the company." />
	<parameter name="qbDepartmentRef" description="Location of the transaction, as defined using location tracking in QuickBooks Online." />
	<parameter name="qbCustomField" description="Custom field or data extension." />
	<parameter name="qbExchangeRate" description="Currency exchange rate." />
	<parameter name="qbPrintStatus" description="Printing status of the invoice." />
	<parameter name="qbGlobalTaxCalculation" description="Method in which tax is applied." />
	<parameter name="qbShipDate" description="Date for delivery of goods or services." />	
	<parameter name="qbClassRef" description="Reference to the Class associated with the transaction." />
	<parameter name="qbTxnDate" description="The date entered by the user when this transaction occurred." />
	<parameter name="qbAutoIncrementDocNumber" description="A boolean flag to auto increment the doc number." />	
	<parameter name="qbApplyTaxAfterDiscount" description="If false or null, calculate the sales tax first, and then apply the discount. If true, subtract the discount first and then calculate the sales tax." />
	<parameter name="qbTrackingNum" description="Shipping provider's tracking number for the delivery of the goods associated with the transaction." />
	<parameter name="qbPaymentRefNum" description="Reference number for the payment." />
	<parameter name="qbPaymentMethodRef" description="Reference to the PaymentMethod." />
	<parameter name="qbCustomerMemo" description="The user-entered message to the customer that appears in the printed invoice or the memo of 
  												the transaction to provide more detail, and does not appear in the printed message of the 
  												bill or the message appears in the printed record if it is an invoice or Bill or Credit Card respectively. " />	
	<parameter name="qbBillEmail" description="Identifies the e-mail address where the SalesReceipt is sent." />	
	<parameter name="qbBillAddr" description="Bill-to address of the receipt." />	
	<parameter name="qbDepositToAccountRef" description="Asset account where the payment money is deposited." />	
	<parameter name="qbShipMethodRef" description="Reference to the ShipMethod associated with the transaction." />
	<parameter name="qbLinkedTxn" description="Zero or more linked transactions." />	
	<parameter name="qbShipAddr" description="Shipping address of the receipt." />	
	<parameter name="qbCurrencyRef" description="Reference to the Currency in which all amounts on the associated transaction are expressed." />	
	<parameter name="qbTxnStatus" description="The status of the transaction." />	
	<parameter name="qbDocNumber" description="Reference number for the transaction." />
	<parameter name="qbEmailStatus" description="Email status of the invoice." />
	<parameter name="qbCustomerRef" description="Reference to a Customer or job." />
	<parameter name="qbTxnTaxDetail" description="Details of taxes charged on the transaction as a whole." />
    <parameter name="qbPrivateNote" description="User entered, organization-private note about the transaction." />
    <parameter name="quoteEstimateMap" description="The mapping between the quotes in Zoho and estimate in QuickBooks." />	

	<sequence>
	
		<property name="zohoApiUrl" expression="$func:zohoApiUrl" />
		<property name="zohoAccessToken" expression="$func:zohoAccessToken" />
		<property name="zohoScope" expression="$func:zohoScope" />		
		<property name="zohoQuoteId" expression="$func:zohoQuoteId" />
		<property name="zohoNewFormat" expression="$func:zohoNewFormat" />
		<property name="zohoVersion" expression="$func:zohoVersion" />
		<property name="zohoWfTrigger" expression="$func:zohoWfTrigger" />
		<property name="zohoduplicateCheck" expression="$func:zohoduplicateCheck" />
		<property name="zohoisApproval" value="true" />			
	
	
		 <!-- QuickBooks createQuote parameters-->
         <property name="qbApiUrl" expression="$func:qbApiUrl"/>
         <property name="qbConsumerKey" expression="$func:qbConsumerKey"/>
         <property name="qbConsumerSecret" expression="$func:qbConsumerSecret"/>
         <property name="qbAccessToken" expression="$func:qbAccessToken"/>
         <property name="qbAccessTokenSecret" expression="$func:qbAccessTokenSecret"/>
         <property name="qbResponseType" value="application/json"/>
         <property name="qbCompanyId" expression="$func:qbCompanyId"/>
		 <property name="qbDepartmentRef" expression="$func:qbDepartmentRef"/>
         <property name="qbCustomField" expression="$func:qbCustomField"/>		 
         <property name="qbExchangeRate" expression="$func:qbExchangeRate"/>
         <property name="qbPrintStatus" expression="$func:qbPrintStatus"/>
         <property name="qbGlobalTaxCalculation" expression="$func:qbGlobalTaxCalculation"/>
         <property name="qbShipDate" expression="$func:qbShipDate"/>
         <property name="qbClassRef" expression="$func:qbClassRef"/>
         <property name="qbTxnDate" expression="$func:qbTxnDate"/>
         <property name="qbAutoIncrementDocNumber" expression="$func:qbAutoIncrementDocNumber"/>
         <property name="qbApplyTaxAfterDiscount" expression="$func:qbApplyTaxAfterDiscount"/>		 
         <property name="qbTrackingNum" expression="$func:qbTrackingNum"/>
         <property name="qbPaymentRefNum" expression="$func:qbPaymentRefNum"/>
         <property name="qbPaymentMethodRef" expression="$func:qbPaymentMethodRef"/>
         <property name="qbCustomerMemo" expression="$func:qbCustomerMemo"/>
         <property name="qbBillEmail" expression="$func:qbBillEmail"/>
         <property name="qbBillAddr" expression="$func:qbBillAddr"/>		 
         <property name="qbDepositToAccountRef" expression="$func:qbDepositToAccountRef"/>
         <property name="qbShipMethodRef" expression="$func:qbShipMethodRef"/>
         <property name="qbLinkedTxn" expression="$func:qbLinkedTxn"/>
         <property name="qbShipAddr" expression="$func:qbShipAddr"/>
         <property name="qbCurrencyRef" expression="$func:qbCurrencyRef"/>		 
         <property name="qbTxnStatus" expression="$func:qbTxnStatus"/>
         <property name="qbDocNumber" expression="$func:qbDocNumber"/>
         <property name="qbEmailStatus" expression="$func:qbEmailStatus"/>
         <property name="qbCustomerRef" expression="$func:qbCustomerRef"/>
         <property name="qbTxnTaxDetail" expression="$func:qbTxnTaxDetail"/>
         <property name="qbPrivateNote" expression="$func:qbPrivateNote"/>
         <property name="quoteEstimateMap" expression="$func:quoteEstimateMap"/>
		 
		<script language="js">
			 <![CDATA[
				var quoteEstimateMapping = eval("(" + mc.getProperty('quoteEstimateMap') + ")");
				var quoteId = mc.getProperty('zohoQuoteId');
				var estimateId = quoteEstimateMapping[quoteId];
				if(estimateId == undefined){
					mc.setProperty('isEstimateExist', 'false'); 
				}else{
				    mc.setProperty('qbEstimateId', "'" + estimateId + "'"); 
					mc.setProperty('isEstimateExist', 'true'); 
				}
			 ]]>
		</script>
		
	  <!-- Check the availability of corresponding estimate id for a given quote id -->		
<filter source="get-property('isEstimateExist')" regex="false">
	<then>
				<!-- If quote attributes are not fetched successfully -->
				<payloadFactory media-type="json">
						<format>
							{
							"response":"The quote id is not available in the given mapping."
							}
						</format>
					</payloadFactory>
					<call-template target="responseHandlerTemplate">
						<!-- parameter values will be passed on to a sequence template -->
						(
						<with-param name="activityName" value="zohocrm_fetchCorrespondingEstimateFailure" />|
						) *
					</call-template>	
	
	</then>
	<else>
			
		 <!--Query Quote details-->
		 <zohocrm.init>
			<apiUrl>{$ctx:zohoApiUrl}</apiUrl>
			<accessToken>{$ctx:zohoAccessToken}</accessToken>
			<scope>{$ctx:zohoScope}</scope>        
		</zohocrm.init>
	  
		<zohocrm.getRecordsById>
			<id>{$ctx:zohoQuoteId}</id>
			<moduleType>Quotes</moduleType>
		</zohocrm.getRecordsById>
	  
	  <!--Removing headers-->
	   <header name="Set-Cookie" action="remove" scope="transport"/>
	   <header name="Content-Type" action="remove" scope="transport"/>
	   <header name="Date" action="remove" scope="transport"/>
	   <header name="Server" action="remove" scope="transport"/> 
	   <header name="Transfer-Encoding" action="remove" scope="transport"/>
	   <header name="Connection" action="remove" scope="transport"/>
	   
		<call-template target="responseHandlerTemplate">
			<!-- parameter values will be passed on to a sequence template -->
			(
			<with-param name="activityName" value="zohocrm_getRecordsByIdQuote" />|
			) *
		</call-template>	   
		
	  <!-- Retrieving Quote information --> 
	  <property name="uri.var.quoteAttributes" expression="json-eval($.response.result.Quotes.row.FL)"/>

	  <!-- Check the availability of quoteAttributes to proceed with other API calls -->		
		<filter source="boolean(get-property('uri.var.quoteAttributes'))" regex="true">
			<then>
	 		 
		<script language="js">
			 <![CDATA[
				 var quoteAttributesString = mc.getProperty("uri.var.quoteAttributes");		 
				 var quoteAttributes = eval("(" + quoteAttributesString + ")");
				 
				 //attribute variables
				 var subject='';
				 var accountName='';
				 var productDetails='';
				 var productAttributes='';
				 var productXmlData='';
				 var productId='';
				 var productName='';
				 var quantity='';
				 var unitPrice='';
				 var listPrice='';
				 var xmlData='';
				 
				
			for (var i = 0; i < quoteAttributes.length ; i++) {

				if(quoteAttributes[i].val == "Quote Stage"){
					mc.setProperty('zohoQuoteStage', quoteAttributes[i].content);
				}
				
				if(quoteAttributes[i].val == "Subject"){
					subject = quoteAttributes[i].content;
				}
				
				if(quoteAttributes[i].val == "Account Name"){
					accountName = quoteAttributes[i].content;
				}

				if(quoteAttributes[i].val == "Product Details"){
				
					productDetails =  quoteAttributes[i].product;
					
					if (typeof(productDetails) == "object" && (productDetails.join == undefined)) {
						//Checking for single product
						productAttributes = productDetails.FL;
						//iterating through the product details
						for (var j = 0; j < productAttributes.length ; j++) { 	
						
							if(productAttributes[j].val == "Product Id"){
								productId = productAttributes[j].content;
							}
							
							if(productAttributes[j].val == "Product Name"){
								productName = productAttributes[j].content;
							}
							
							if(productAttributes[j].val == "List Price"){
								listPrice = productAttributes[j].content;
							}

							if(productAttributes[j].val == "Quantity"){
								quantity = productAttributes[j].content;
							}

							if(productAttributes[j].val == "Unit Price"){
								unitPrice = productAttributes[j].content;
							}				
						}	

						productXmlData += 	'<product no="1"><FL val="Product Id">' + productId + '</FL><FL val="Quantity">' + quantity + '</FL><FL val="Unit Price">'+ unitPrice + '</FL><FL val="List Price">'+ listPrice +'</FL></product>'				
					
					}else{
					
					//Checking for multiple products	
						//iterating through the products
						for (var k = 0; k < productDetails.length ; k++) { 	
							productAttributes = productDetails[k].FL;	
								//iterating through the product details
								for (var j = 0; j < productAttributes.length ; j++) { 	
								
									if(productAttributes[j].val == "Product Id"){
										productId = productAttributes[j].content;
									}
									
									if(productAttributes[j].val == "Product Name"){
										productName = productAttributes[j].content;
									}
									
									if(productAttributes[j].val == "List Price"){
										listPrice = productAttributes[j].content;
									}

									if(productAttributes[j].val == "Quantity"){
										quantity = productAttributes[j].content;
									}

									if(productAttributes[j].val == "Unit Price"){
										unitPrice = productAttributes[j].content;
									}				
								}

								productXmlData += 	'<product no="' + eval((k+1)) + '"><FL val="Product Id">' + productId + '</FL><FL val="Quantity">' + quantity + '</FL><FL val="Unit Price">'+ unitPrice + '</FL><FL val="List Price">'+ listPrice +'</FL></product>'						
						}					
					}
			
				}	
			}				 
				 
			
			xmlData += '<row no="1"><FL val="Subject">' + subject + '</FL><FL val="Account Name">' + accountName + '</FL><FL val="Product Details">' + productXmlData +'</FL></row>';			
			xmlData = '<SalesOrders>' + xmlData + '</SalesOrders>';
			mc.setProperty('zohoXmlDataSalesOrder', xmlData); 
			 ]]>
		</script>

				<call-template target="zohocrm-createSalesOrder">
					<with-param name="zohoApiUrl" value="{$ctx:zohoApiUrl}"/>
					<with-param name="zohoAccessToken" value="{$ctx:zohoAccessToken}"/>
					<with-param name="zohoScope" value="{$ctx:zohoScope}"/>
					<with-param name="zohoIsApproval" value="{$ctx:zohoIsApproval}"/>
					<with-param name="zohoXmlDataSalesOrder" value="{$ctx:zohoXmlDataSalesOrder}"/>
					<with-param name="zohoNewFormat" value="{$ctx:zohoNewFormat}"/>
					<with-param name="zohoVersion" value="{$ctx:zohoVersion}"/>
					<with-param name="zohoWfTrigger" value="{$ctx:zohoWfTrigger}"/>
					<with-param name="zohoDuplicateCheck" value="{$ctx:zohoDuplicateCheck}"/>
					<with-param name="zohoQuoteId" value="{$ctx:zohoQuoteId}"/>
				 </call-template>
				 
			  <!-- Check whether the zohocrm quote is successfully updated -->		
				<filter source="boolean(get-property('uri.var.zohoUpdatedQuoteID'))" regex="true">
					<then>
					<property name="qbQueryString" expression="fn:concat('select * from Estimate where Id =', get-property('qbEstimateId'))"/>
					
						<quickbooks.init>
							<consumerKey>{$ctx:qbConsumerKey}</consumerKey>
							<accessToken>{$ctx:qbAccessToken}</accessToken>
							<accessTokenSecret>{$ctx:qbAccessTokenSecret}</accessTokenSecret>
							<responseType>{$ctx:qbResponseType}</responseType>
							<apiUrl>{$ctx:qbApiUrl}</apiUrl>
							<companyId>{$ctx:qbCompanyId}</companyId>
							<consumerSecret>{$ctx:qbConsumerSecret}</consumerSecret>
						 </quickbooks.init>
						 
						 <quickbooks.query>
							<queryString>{$ctx:qbQueryString}</queryString>
						 </quickbooks.query>
							
						  <!-- Obtaining the estimate details-->
						  <property name="uri.var.qbEstimateDetails" expression="json-eval($.QueryResponse.Estimate)"/>
				  
						<call-template target="responseHandlerTemplate">
							<!-- parameter values will be passed on to a sequence template -->
							(
							<with-param name="activityName" value="quickbooks_fetchEstimateData" />|
							) *
						</call-template>						 
				
				  <!-- Check whether the estimate details are successfully derived -->		
					<filter source="boolean(get-property('uri.var.qbEstimateDetails'))" regex="true">
						<then>	
							<property name="qbLine" expression="json-eval($.QueryResponse.Estimate[0].Line)"/>
							<property name="qbCustomerRef" expression="json-eval($.QueryResponse.Estimate[0].CustomerRef)"/>
							<property name="qbPrivateNote" expression="json-eval($.QueryResponse.Estimate[0].PrivateNote)"/>
							
							
							<!--Creating Sales Receipt in Quickbooks--> 
							<quickbooks.init>
								<apiUrl>{$ctx:qbApiUrl}</apiUrl>
								<consumerKey>{$ctx:qbConsumerKey}</consumerKey>
								<accessToken>{$ctx:qbAccessToken}</accessToken>
								<accessTokenSecret>{$ctx:qbAccessTokenSecret}</accessTokenSecret>
								<responseType>{$ctx:qbResponseType}</responseType>
								<companyId>{$ctx:qbCompanyId}</companyId>
								<consumerSecret>{$ctx:qbConsumerSecret}</consumerSecret>
								<notes>{$ctx:qbDescription}</notes>
							</quickbooks.init>
							<quickbooks.createSalesReceipt>
								<departmentRef>{$ctx:qbDepartmentRef}</departmentRef>
								<homeTotalAmt>{$ctx:qbHomeTotalAmt}</homeTotalAmt>
								<customField>{$ctx:qbCustomField}</customField>
								<exchangeRate>{$ctx:qbExchangeRate}</exchangeRate>
								<printStatus>{$ctx:qbPrintStatus}</printStatus>
								<line>{$ctx:qbLine}</line>
								<globalTaxCalculation>{$ctx:qbGlobalTaxCalculation}</globalTaxCalculation>
								<shipDate>{$ctx:qbShipDate}</shipDate>
								<totalAmt>{$ctx:qbTotalAmt}</totalAmt>
								<classRef>{$ctx:qbClassRef}</classRef>
								<txnDate>{$ctx:qbTxnDate}</txnDate>
								<balance>{$ctx:qbBalance}</balance>
								<autoIncrementDocNumber>{$ctx:qbAutoIncrementDocNumber}</autoIncrementDocNumber>
								<applyTaxAfterDiscount>{$ctx:qbApplyTaxAfterDiscount}</applyTaxAfterDiscount>
								<trackingNum>{$ctx:qbTrackingNum}</trackingNum>
								<paymentRefNum>{$ctx:qbPaymentRefNum}</paymentRefNum>
								<paymentMethodRef>{$ctx:qbPaymentMethodRef}</paymentMethodRef>
								<customerMemo>{$ctx:qbCustomerMemo}</customerMemo>
								<billEmail>{$ctx:qbBillEmail}</billEmail>
								<billAddr>{$ctx:qbBillAddr}</billAddr>
								<depositToAccountRef>{$ctx:qbDepositToAccountRef}</depositToAccountRef>
								<shipMethodRef>{$ctx:qbShipMethodRef}</shipMethodRef>
								<linkedTxn>{$ctx:qbLinkedTxn}</linkedTxn>
								<shipAddr>{$ctx:qbShipAddr}</shipAddr>
								<currencyRef>{$ctx:qbCurrencyRef}</currencyRef>
								<txnStatus>{$ctx:qbTxnStatus}</txnStatus>
								<docNumber>{$ctx:qbDocNumber}</docNumber>
								<emailStatus>{$ctx:qbEmailStatus}</emailStatus>
								<customerRef>{$ctx:qbCustomerRef}</customerRef>
								<txnTaxDetail>{$ctx:qbTxnTaxDetail}</txnTaxDetail>
								<privateNote>{$ctx:qbPrivateNote}</privateNote>
							</quickbooks.createSalesReceipt>	
							
							<call-template target="responseHandlerTemplate">
								<!-- parameter values will be passed on to a sequence template -->
								(
								<with-param name="activityName" value="quickbooks_createSalesReciept" />|
								) *
							</call-template>
							
						</then>
						<else>
							<!-- If the estimate details are not successfully derived -->
							<payloadFactory media-type="json">
									<format>
										{
										"response":"Estimate details are not successfully fetched."
										}
									</format>
								</payloadFactory>
								<call-template target="responseHandlerTemplate">
									<!-- parameter values will be passed on to a sequence template -->
									(
									<with-param name="activityName" value="quickbooks_createSalesReceipt" />|
									) *
								</call-template>						
						</else>
					</filter>		
					</then>
					<else>
							<!-- If the quote is not successfully updated -->
							<payloadFactory media-type="json">
									<format>
										{
										"response":"Quote is not successfully updated."
										}
									</format>
								</payloadFactory>
								<call-template target="responseHandlerTemplate">
									<!-- parameter values will be passed on to a sequence template -->
									(
									<with-param name="activityName" value="zohocrm_updateQuoteFailure" />|
									) *
								</call-template>
					</else>
				</filter>	
			</then>
			<else>
				<!-- If quote attributes are not fetched successfully -->
				<payloadFactory media-type="json">
						<format>
							{
							"response":"Unable to fetch quote data due to invalid id."
							}
						</format>
					</payloadFactory>
					<call-template target="responseHandlerTemplate">
						<!-- parameter values will be passed on to a sequence template -->
						(
						<with-param name="activityName" value="zohocrm_getQuoteByIdFailure" />|
						) *
					</call-template>
			</else>
		</filter>	
	</else>
</filter>		
	</sequence>
</template>