<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="zohocrm_qbCreateEstimate"
       transports="https,http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
   <target>
      <inSequence onError="faultHandlerSeq">
	  
	  <!-- ZohoCRM insertRecords parameters -->
	  <property name="zohoApiUrl" expression="json-eval($.zohoApiUrl)"/>
      <property name="zohoAccessToken" expression="json-eval($.zohoAccessToken)"/>
      <property name="zohoScope" expression="json-eval($.zohoScope)"/>
      <property name="zohoNewFormat" expression="json-eval($.zohoNewFormat)"/>
      <property name="zohoVersion" expression="json-eval($.zohoVersion)"/>
      <property name="zohoXmlData" expression="json-eval($.zohoXmlData)"/>
      <property name="zohoWfTrigger" expression="json-eval($.zohoWfTrigger)"/>
      <property name="zohoDuplicateCheck" expression="json-eval($.zohoDuplicateCheck)"/>
      <property name="zohoIsApproval" expression="json-eval($.zohoIsApproval)"/>
	  <property name="zohoModuleType" expression="json-eval($.zohoModuleType)"/>
	  
	  <!-- QuickBooks createQuote parameters-->
	 <property name="qbConsumerKey" expression="json-eval($.qbConsumerKey)"/>
	 <property name="qbAccessToken" expression="json-eval($.qbAccessToken)"/>
	 <property name="qbAccessTokenSecret" expression="json-eval($.qbAccessTokenSecret)"/>
	 <property name="qbResponseType" expression="json-eval($.qbResponseType)"/>
	 <property name="qbApiUrl" expression="json-eval($.qbApiUrl)"/>
	 <property name="qbCompanyId" expression="json-eval($.qbCompanyId)"/>
	 <property name="qbConsumerSecret" expression="json-eval($.qbConsumerSecret)"/>
	 <property name="qbDepartmentRef" expression="json-eval($.qbDepartmentRef)"/>
	 <property name="qbCustomField" expression="json-eval($.qbCustomField)"/>
	 <property name="qbExchangeRate" expression="json-eval($.qbExchangeRate)"/>
	 <property name="qbPrintStatus" expression="json-eval($.qbPrintStatus)"/>
	 <property name="qbGlobalTaxCalculation" expression="json-eval($.qbGlobalTaxCalculation)"/>
	 <property name="qbShipDate" expression="json-eval($.qbShipDate)"/>
	 <property name="qbTotalAmt" expression="json-eval($.qbTotalAmt)"/>
	 <property name="qbClassRef" expression="json-eval($.qbClassRef)"/>
	 <property name="qbTxnDate" expression="json-eval($.qbTxnDate)"/>
	 <property name="qbSalesTermRef" expression="json-eval($.qbSalesTermRef)"/>
	 <property name="qbApplyTaxAfterDiscount" expression="json-eval($.qbApplyTaxAfterDiscount)"/>
	 <property name="qbCustomerMemo" expression="json-eval($.qbCustomerMemo)"/>
	 <property name="qbBillEmail" expression="json-eval($.qbBillEmail)"/>
	 <property name="qbAcceptedDate" expression="json-eval($.qbAcceptedDate)"/>
	 <property name="qbExpirationDate" expression="json-eval($.qbExpirationDate)"/>
	 <property name="qbShipMethodRef" expression="json-eval($.qbShipMethodRef)"/>
	 <property name="qbLinkedTxn" expression="json-eval($.qbLinkedTxn)"/>
	 <property name="qbCurrencyRef" expression="json-eval($.qbCurrencyRef)"/>
	 <property name="qbTxnStatus" expression="json-eval($.qbTxnStatus)"/>
	 <property name="qbDocNumber" expression="json-eval($.qbDocNumber)"/>
	 <property name="qbAcceptedBy" expression="json-eval($.qbAcceptedBy)"/>
	 <property name="qbEmailStatus" expression="json-eval($.qbEmailStatus)"/>
	 <property name="qbCustomerRef" expression="json-eval($.qbCustomerRef)"/>
	 <property name="qbTxnTaxDetail" expression="json-eval($.qbTxnTaxDetail)"/>	
     <property name="qbBillAddr" expression="json-eval($.qbBillAddr)"/>
     <property name="qbShipAddr" expression="json-eval($.qbShipAddr)"/>     	 
	 <property name="productItemMap" expression="json-eval($.productItemMap)"/>     	 
	 
      <call-template target="zohocrm-createAndRetrieveQuoteDetails">
	   <!-- parameter values will be passed on to a sequence template -->
	   (
	   <with-param name="zohoScope" value="{$ctx:zohoScope}" /> |
	   <with-param name="zohoAccessToken" value="{$ctx:zohoAccessToken}" /> |
	   <with-param name="zohoApiUrl" value="{$ctx:zohoApiUrl}" /> |
	   <with-param name="zohoModuleType" value="{$ctx:zohoModuleType}" /> |
	   <with-param name="zohoDuplicateCheck" value="{$ctx:zohoDuplicateCheck}" /> |
	   <with-param name="zohoXmlData" value="{$ctx:zohoXmlData}" /> |
	   <with-param name="zohoIsApproval" value="{$ctx:zohoIsApproval}" /> |
	   <with-param name="zohoWfTrigger" value="{$ctx:zohoWfTrigger}" /> |
	   <with-param name="zohoNewFormat" value="{$ctx:zohoNewFormat}" /> |
	   <with-param name="zohoVersion" value="{$ctx:zohoVersion}" /> |
	   ) *
	 </call-template>

	 <!-- Retrieving relevant attributes of ZohoCRm quote --> 
	  <property name="quoteAttributes" expression="json-eval($.response.result.Quotes.row.FL)"/>	 
	  
     <script language="js">
			var products;
			var productAttributes;
			var lineObject;
			var productName;
			var listPrice;
			var quantity;
			var productId;
			
			var jsn = eval("(" + mc.getProperty("quoteAttributes") + ")");
			var lineArray=eval("([])");
			var productItemMap = eval("("+mc.getProperty('productItemMap')+")");
			
			for (var i = 0; i &lt; jsn.length ; i++) {
			
				if(jsn[i].val == "Subject"){
					mc.setProperty('qbQuoteSubject', jsn[i].content)
				}
				if(jsn[i].val == "Product Details"){
					products = jsn[i].product;
				}
			}
			
		if (typeof(products) == "object" &amp;&amp; (products.join == undefined)) {
			productAttributes = products.FL;
			lineObject=eval("({})");
			
			for (var i = 0; i &lt; productAttributes.length ; i++) { 	
				if(productAttributes[i].val == "Product Name"){
					productName = productAttributes[i].content;
				}
				
				if(productAttributes[i].val == "List Price"){
					listPrice = productAttributes[i].content;
				}

				if(productAttributes[i].val == "Quantity"){
					quantity = productAttributes[i].content;
				}

				if(productAttributes[i].val == "Product Id"){
					productId = productAttributes[i].content;
				}				
			}
																								
				lineObject.Id = "1";
				lineObject.DetailType = "SalesItemLineDetail";
				lineObject.SalesItemLineDetail = eval("({})");
				lineObject.SalesItemLineDetail.UnitPrice = eval(listPrice);
				lineObject.SalesItemLineDetail.Qty = eval(quantity);
				lineObject.SalesItemLineDetail.ItemRef = eval("({})");
				lineObject.SalesItemLineDetail.ItemRef.name = productName;
				lineObject.SalesItemLineDetail.ItemRef.value = productItemMap[productId];
				lineObject.Amount = eval(listPrice + '*' + quantity);
				lineArray[0] = lineObject;
				mc.setPayloadJSON(lineArray);
				
		}else{
			
				for (var j = 0; j &lt; products.length ; j++) {
					productAttributes = products[j].FL;
					lineObject=eval("({})");
					
					for (var i = 0; i &lt; productAttributes.length ; i++) { 	
						if(productAttributes[i].val == "Product Name"){
							productName = productAttributes[i].content;
						}
						
						if(productAttributes[i].val == "List Price"){
							listPrice = productAttributes[i].content;
						}

						if(productAttributes[i].val == "Quantity"){
							quantity = productAttributes[i].content;
						}

						if(productAttributes[i].val == "Product Id"){
							productId = productAttributes[i].content;
						}							
					}
						lineObject.Id = eval('"'+(j+1)+'"');
						lineObject.DetailType = "SalesItemLineDetail";
						lineObject.SalesItemLineDetail = eval("({})");
						lineObject.SalesItemLineDetail.UnitPrice = eval(listPrice);
						lineObject.SalesItemLineDetail.Qty = eval(quantity);
						lineObject.SalesItemLineDetail.ItemRef = eval("({})");
						lineObject.SalesItemLineDetail.ItemRef.name = productName;
						lineObject.SalesItemLineDetail.ItemRef.value = productItemMap[productId];
						lineObject.Amount = eval(listPrice + '*' + quantity);
						lineArray[j] = lineObject;
						mc.setPayloadJSON(lineArray);					
				}
			
			}		
						
		</script>

	    <property name="qbLine" expression="json-eval($)"/>

        <quickbooks.init>
            <consumerKey>{$ctx:qbConsumerKey}</consumerKey>
            <accessToken>{$ctx:qbAccessToken}</accessToken>
            <accessTokenSecret>{$ctx:qbAccessTokenSecret}</accessTokenSecret>
            <responseType>{$ctx:qbResponseType}</responseType>
            <apiUrl>{$ctx:qbApiUrl}</apiUrl>
            <companyId>{$ctx:qbCompanyId}</companyId>
            <consumerSecret>{$ctx:qbConsumerSecret}</consumerSecret>
         </quickbooks.init>
		 
         <quickbooks.createEstimate>
            <departmentRef>{$ctx:qbDepartmentRef}</departmentRef>
            <customField>{$ctx:qbCustomField}</customField>
            <exchangeRate>{$ctx:qbExchangeRate}</exchangeRate>
            <printStatus>{$ctx:qbPrintStatus}</printStatus>
            <line>{$ctx:qbLine}</line>
            <globalTaxCalculation>{$ctx:qbGlobalTaxCalculation}</globalTaxCalculation>
            <shipDate>{$ctx:qbShipDate}</shipDate>
            <totalAmt>{$ctx:qbTotalAmt}</totalAmt>
            <classRef>{$ctx:qbClassRef}</classRef>
            <txnDate>{$ctx:qbTxnDate}</txnDate>
            <salesTermRef>{$ctx:qbSalesTermRef}</salesTermRef>
            <applyTaxAfterDiscount>{$ctx:qbApplyTaxAfterDiscount}</applyTaxAfterDiscount>
            <customerMemo>{$ctx:qbCustomerMemo}</customerMemo>
            <billEmail>{$ctx:qbBillEmail}</billEmail>
            <acceptedDate>{$ctx:qbAcceptedDate}</acceptedDate>
            <expirationDate>{$ctx:qbExpirationDate}</expirationDate>
            <shipMethodRef>{$ctx:qbShipMethodRef}</shipMethodRef>
            <linkedTxn>{$ctx:qbLinkedTxn}</linkedTxn>
            <currencyRef>{$ctx:qbCurrencyRef}</currencyRef>
            <txnStatus>{$ctx:qbTxnStatus}</txnStatus>
            <docNumber>{$ctx:qbDocNumber}</docNumber>
            <acceptedBy>{$ctx:qbAcceptedBy}</acceptedBy>
            <emailStatus>{$ctx:qbEmailStatus}</emailStatus>
            <customerRef>{$ctx:qbCustomerRef}</customerRef>
            <txnTaxDetail>{$ctx:qbTxnTaxDetail}</txnTaxDetail>
            <privateNote>{$ctx:qbQuoteSubject}</privateNote>
			<shipAddr>{$ctx:qbShipAddr}</shipAddr>
            <billAddr>{$ctx:qbBillAddr}</billAddr>
         </quickbooks.createEstimate> 

		<call-template target="responseHandlerTemplate">
			<!-- parameter values will be passed on to a sequence template -->
			(
			<with-param name="activityName" value="quickbooks_createEstimate" />
			|
			) *
		</call-template>
		
      <loopback/>
      </inSequence>
      <outSequence>
         <log/>
			<property name="messageType" value="application/json" scope="axis2"></property>
			<payloadFactory media-type="json">
				<format>
					{
					"Response":[$1]
					}
				</format>
				<args>
					<arg expression="get-property('uri.var.responseString')" />
				</args>
			</payloadFactory>
         <send/>
      </outSequence>
   </target>
   <description/>
</proxy>
                                