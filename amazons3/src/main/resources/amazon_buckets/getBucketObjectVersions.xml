<template name="getBucketObjectVersions" xmlns="http://ws.apache.org/ns/synapse">
	<parameter name="bucketUrl" description="End point for the request" />
	<parameter name="delimiter" description="Delimiter is a character that specify to group keys" />
	<parameter name="encodingType" description="Requests Amazon S3 to encode the response and specifies the encoding method to use" />
	<parameter name="keyMarker" description="Specifies the key in the bucket that you want to start listing from. Also, see version-id-marker" />
	<parameter name="maxKeys" description="Sets the maximum number of keys returned in the response body" />
	<parameter name="prefix" description="Use this parameter to select only those keys that begin with the specified prefix" />
	<parameter name="versionIdMarker" description="Parameter Description 6" />
	<parameter name="query" description="End point for the request" />

	<sequence>
		<property name="uri.var.bucketUrl" expression="$func:bucketUrl" />
		<property name="uri.var.delimiter" expression="$func:delimiter" />
		<property name="uri.var.encodingType" expression="$func:encodingType" />
		<property name="uri.var.keyMarker" expression="$func:keyMarker" />
		<property name="uri.var.maxKeys" expression="$func:maxKeys" />
		<property name="uri.var.prefix" expression="$func:prefix" />
		<property name="uri.var.versionIdMarker" expression="$func:versionIdMarker" />
		<property name="uri.var.query" value="" />

		<filter
			xpath="(not(get-property('uri.var.delimiter') = '' or  (not(string(get-property('uri.var.delimiter'))))))">
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;delimiter=', get-property('uri.var.delimiter'))" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.encodingType') = '' or  (not(string(get-property('uri.var.encodingType'))))))">
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;encoding-type=', get-property('uri.var.encodingType'))" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.keyMarker') = '' or  (not(string(get-property('uri.var.keyMarker'))))))">
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;key-marker=', get-property('uri.var.keyMarker'))" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.maxKeys') = '' or  (not(string(get-property('uri.var.maxKeys'))))))">
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;max-keys=', get-property('uri.var.maxKeys'))" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.prefix') = '' or  (not(string(get-property('uri.var.prefix'))))))">
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;prefix=', get-property('uri.var.prefix'))" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.versionIdMarker') = '' or  (not(string(get-property('uri.var.versionIdMarker'))))))">
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;version-id-marker=', get-property('uri.var.versionIdMarker'))" />
			</then>
		</filter>

		<property name="DISABLE_CHUNKING" value="true" scope="axis2" />

		<call>
			<endpoint>
				<http method="get" uri-template="{uri.var.bucketUrl}/?versions={uri.var.query}"
					format="pox" />				
			</endpoint>
		</call>

	</sequence>
</template>